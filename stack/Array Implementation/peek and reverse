#include<stdio.h>
#include<stdlib.h>
#define size 10
struct stack{
    int top;
    int arr[size];
};
void initialized(struct stack *sptr){
    sptr->top=-1;
}
int push(struct stack *sptr,int value){
    if(sptr->top==size-1){
        return 0;
    }
    else{
        sptr->top++;
        sptr->arr[sptr->top]=value;
        return 1;
        }
    }
    int pop(struct stack *sptr,int poppedvalue){
        if(sptr->top==-1){
            return 0;
        }
        else{
            poppedvalue=sptr->arr[sptr->top];
            sptr->top--;
            return 1;
        }
    }
    int peek(struct stack *sptr){
        if(sptr->top==-1){
            printf("stack is empty");
            return 0;
        }
        else{
            printf("%d",sptr->arr[sptr->top]);
            return 1;
        }
    }
    void printstack(struct stack *sptr){
        if(sptr->top==-1){
            printf("stack is empty");
        }
        else{
            for(int i=sptr->top;i>=0;i--){
                printf("%d\n",sptr->arr[i]);
            }
        }
    }
    void reversestack(struct stack *sptr){
        if(sptr->top==-1){
            printf("stack is empty");
        }
        else{
            for(int i=0;i<=sptr->top;i++){
            printf("%d\n",sptr->arr[i]);
            }
        }
    }
    
    
int main(){
    struct stack s;
    initialized(&s);
    printf("After PUSH\n");
    push(&s,10);
    push(&s,20);
    push(&s,30);
    push(&s,40);
    printstack(&s);
    printf("\n");
    printf("reverse stack\n");
    reversestack(&s);
    printf("\nAfter POP\n");
    pop(&s,40);
    printstack(&s);
    printf("peek element:");
    peek(&s);
    
    return 0;
}
